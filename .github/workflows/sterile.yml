# This is a sterile build and test workflow that uses the `dev-env` container image
# to build and test the project in a sterile environment.
# Artifacts produced by this workflow are intended to be used for production.
#

name: "sterile.yml"

on:
  pull_request: {}
  push:
    branches:
      - "main"
  merge_group:
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: "boolean"
        description: "Run with tmate enabled"
        required: false
        default: false

concurrency:
  group: "${{ github.workflow }}:${{ github.event.pull_request.number || github.event.after }}"
  cancel-in-progress: true

jobs:
  check_changes:
    name: "Deduce required tests from code changes"
    runs-on: "ubuntu-latest"
    outputs:
      devfiles: "${{ steps.changes.outputs.devfiles }}"
    steps:
      - name: "Checkout"
        if: "${{ !github.event.pull_request }}"
        uses: "actions/checkout@v4"
        with:
          persist-credentials: "false"
          fetch-depth: "0"
      - name: "Check code changes"
        uses: "dorny/paths-filter@v3"
        id: "changes"
        with:
          filters: |
            devfiles:
              - '!(README.md|LICENSE|design-docs/**|.gitignore|.github/**)'
              - '.github/workflows/sterile.yml'

  test:
    needs: [ check_changes ]
    if: "${{ needs.check_changes.outputs.devfiles == 'true' }}"
    permissions:
      contents: "read"
      packages: "read"
      id-token: "write"
    runs-on: "ubuntu-latest"
    strategy:
      fail-fast: false
      matrix:
        rust:
          - "stable"
          - "nightly"
    steps:
      - name: "succeed"
        run: |
          true

  push:
    needs: [ check_changes ]
    if: "${{ needs.check_changes.outputs.devfiles == 'true' }}"
    permissions:
      contents: "read"
      packages: "write"
      id-token: "write"
    runs-on: "ubuntu-latest"
    strategy:
      fail-fast: false
      matrix:
        rust:
          - "stable"
          - "nightly"
    steps:
      - name: "succeed"
        run: |
          true

  summary:
    name: "summary"
    runs-on: "ubuntu-latest"
    needs:
      - test
      - push
    if: ${{ always() && needs.test.result != 'skipped' && needs.push.result != 'skipped' }}
    steps:
      - name: "Flag any test failures"
        if: ${{ needs.test.result != 'success' }}
        run: |
          >&2 echo "One or more required tests failed"
          exit 1
      - name: "Flag any push failures"
        if: ${{ needs.push.result != 'success' }}
        run: |
          >&2 echo "One or more required pushes failed"
          exit 1
