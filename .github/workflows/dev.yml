# The primary point of this workflow is to ensure that the developer experience is good.
# We take a very vanilla ubuntu image, install all necessary dependencies via "normal" means,
# and then run the build and test steps as described in the README.md file.

# The artifacts produced by these builds are not intended to be used for anything other than
# ensuring that the developer experience is good.

# Production artifacts are produced in a sterile environment (in another CI workflow).
#

name: "dev.yml"

on:
  pull_request: {}
  push:
    branches:
      - "main"
  merge_group:
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: "boolean"
        description: "Run with tmate enabled"
        required: false
        default: false

concurrency:
  group: "${{ github.workflow }}:${{ github.event.pull_request.number || github.event.after }}"
  cancel-in-progress: true

permissions:
  contents: "read"
  packages: "write"
  id-token: "write"

jobs:
  check_changes:
    name: "Deduce required tests from code changes"
    permissions:
      contents: "read"
      pull-requests: "read"
    runs-on: "ubuntu-latest"
    outputs:
      devfiles: "${{ steps.changes.outputs.devfiles }}"
    steps:
      - name: "Checkout"
        if: "${{ !github.event.pull_request }}"
        uses: "actions/checkout@v4"
        with:
          persist-credentials: "false"
          fetch-depth: "0"
      - name: "Check code changes"
        uses: "dorny/paths-filter@v3"
        id: "changes"
        with:
          filters: |
            devfiles:
              - '!(README.md|LICENSE|design-docs/**|.gitignore|.github/**)'
              - '.github/workflows/dev.yml'

  build:
    needs: [ check_changes ]
    if: "${{ needs.check_changes.outputs.devfiles == 'true' }}"
    strategy:
      fail-fast: false
      matrix:
        rust:
          - toolchain: "stable"
            optional: false
          - toolchain: "beta"
            optional: true
          - toolchain: "nightly"
            optional: true
    continue-on-error: ${{ matrix.rust.optional }}
    runs-on: "ubuntu-latest"
    timeout-minutes: 45
    steps:
      - name: "fail"
        run: |
          false

  summary:
    name: "summary"
    runs-on: "ubuntu-latest"
    needs:
      - build
    if: ${{ always() && needs.build.result != 'skipped' }}
    steps:
      - name: "Flag any build matrix failures"
        if: ${{ needs.build.result != 'success' }}
        run: |
          >&2 echo "A critical step failed!"
          exit 1
