# The primary point of this workflow is to ensure that the developer experience is good.
# We take a very vanilla ubuntu image, install all necessary dependencies via "normal" means,
# and then run the build and test steps as described in the README.md file.

# The artifacts produced by these builds are not intended to be used for anything other than
# ensuring that the developer experience is good.

# Production artifacts are produced in a sterile environment (in another CI workflow).

name: "dev.yml"

on:
  pull_request: { }
  push:
    branches:
      - "main"
  merge_group:
    types: [ "checks_requested" ]
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: "boolean"
        description: "Run with tmate enabled"
        required: false
        default: false
      debug_justfile:
        type: "boolean"
        description: "enable to see debug statements from just recipes"
        required: false
        default: false

concurrency:
  group: "${{ github.workflow }}:${{ github.event.pull_request.number || github.event.after || github.event.merge_group && github.run_id }}"
  cancel-in-progress: true

permissions:
  contents: "read"
  packages: "write"
  id-token: "write"

jobs:
  check_changes:
    name: "Deduce required tests from code changes"
    permissions:
      contents: "read"
      pull-requests: "read"
    runs-on: "ubuntu-latest"
    outputs:
      devfiles: "${{ steps.changes.outputs.devfiles }}"
    steps:
      - name: "Checkout"
        if: "${{ !github.event.pull_request }}"
        uses: "actions/checkout@v4"
        with:
          persist-credentials: "false"
          fetch-depth: "0"
      - name: "Check code changes"
        uses: "dorny/paths-filter@v3"
        id: "changes"
        with:
          filters: |
            devfiles:
              - '!(README.md|LICENSE|.gitignore|.github/**)'
              - '.github/workflows/dev.yml'

  build:
    needs: [ check_changes ]
    if: "${{ needs.check_changes.outputs.devfiles == 'true' }}"
    permissions:
      checks: "write"
      pull-requests: "write"
      contents: "read"
      packages: "write"
      id-token: "write"
    strategy:
      fail-fast: false
      matrix:
        rust:
          - # failures on stable block release
            version: "stable"
            optional: false
            # HACK: we sleep for a different time in each job to avoid provoking DDoS mitigations in cargo binstall
            #       resulting from launching multiple binstall tasks at (very nearly) the same time.
            sleep: "0.0"
          - # failures on beta block release
            version: "beta"
            optional: false
            sleep: "0.2"
          - # failures on the nightly channel are a clear "yellow" flag
            version: "nightly"
            optional: true
            sleep: "0.4"
        debug_justfile:
          - "${{ inputs.debug_justfile || false }}"
    outputs:
      result: "${{ matrix.rust.optional || (steps.debug_test.conclusion == 'success' && steps.release_test.conclusion == 'success' && steps.docs.conclusion == 'success' && steps.clippy.conclusion == 'success') }}"
    name: "Developer build"
    runs-on: "lab"
    timeout-minutes: 45
    steps:
      - name: "login to ghcr.io"
        uses: "docker/login-action@v3"
        with:
          registry: "ghcr.io"
          username: "${{ github.actor }}"
          password: "${{ secrets.GITHUB_TOKEN }}"
      - name: "install rust"
        uses: "dtolnay/rust-toolchain@master"
        with:
          toolchain: "${{ matrix.rust.version }}"
          targets: "x86_64-unknown-linux-gnu"
          components: "rustfmt,clippy"
      - name: "install cargo binstall"
        uses: "cargo-bins/cargo-binstall@v1.12.6"
      - name: "Checkout"
        uses: "actions/checkout@v4"
        with:
          persist-credentials: "false"
          fetch-depth: "0"
      - name: "install just"
        run: |
          sleep ${{matrix.rust.sleep}}
          cargo binstall --no-confirm just
      - name: "install cargo-deny"
        run: |
          sleep ${{matrix.rust.sleep}}
          cargo binstall --no-confirm cargo-deny
      - name: "install cargo-nextest"
        run: |
          sleep ${{matrix.rust.sleep}}
          cargo binstall --no-confirm cargo-nextest
          mkdir -p target/nextest
      - name: "refresh-compile-env"
        run: |
          just --yes debug_justfile="${{matrix.debug_justfile}}" refresh-compile-env
      - run: |
          just debug_justfile="${{matrix.debug_justfile}}" cargo deny check
      - run: |
          just --yes debug_justfile="${{matrix.debug_justfile}}" fake-nix

      - id: "debug_test"
        name: "test debug"
        run: |
          set -euo pipefail
          just \
            debug_justfile="${{matrix.debug_justfile}}" \
            rust=${{matrix.rust.version}} \
            profile=debug \
            target=x86_64-unknown-linux-gnu \
            cargo nextest run --status-level=none --final-status-level=skip --message-format=libtest-json-plus > ./target/nextest/debug.json
          mv ./target/nextest/default/junit.xml ./target/nextest/default/debug.junit.xml
          jq \
            --raw-output \
            --slurp '.[] | select(.type == "test" and (.name | test(".*#\\d+"))) | ( .name | split("#") ) | 
                     [.[0], (.[1] | tonumber)] | @csv
          ' ./target/nextest/debug.json > ./target/nextest/debug.flakes.csv
          if [ -s ./target/nextest/debug.flakes.csv ]; then
            cargo binstall --no-confirm csview
            { 
              echo "FLAKY_TESTS_DEBUG<<EOF"
              echo -e "### :warning: Flaky tests (debug run, ${{ matrix.rust.version }})\n";
              echo "| test | retries |"
              echo "|------|---------|"
              csview --style=markdown --no-headers --body-align=left ./target/nextest/debug.flakes.csv;
              echo "EOF"
            } >> "${GITHUB_ENV}"
          fi

      - id: "release_test"
        name: "test release"
        run: |
          set -euo pipefail
          just \
            debug_justfile="${{matrix.debug_justfile}}" \
            rust=${{matrix.rust.version}} \
            profile=debug \
            target=x86_64-unknown-linux-gnu \
            cargo nextest run --status-level=none --final-status-level=skip --message-format=libtest-json-plus > ./target/nextest/release.json
          mv ./target/nextest/default/junit.xml ./target/nextest/default/release.junit.xml
          jq \
            --raw-output \
            --slurp '.[] | select(.type == "test" and (.name | test(".*#\\d+"))) | ( .name | split("#") ) | 
                     [.[0], (.[1] | tonumber)] | @csv
          ' ./target/nextest/release.json > ./target/nextest/release.flakes.csv
          if [ -s ./target/nextest/release.flakes.csv ]; then
            cargo binstall --no-confirm csview
            { 
              echo "FLAKY_TESTS_RELEASE<<EOF"
              echo -e "\n### :warning: Flaky tests (release run, ${{ matrix.rust.version }})\n";
              echo "| test | retries |"
              echo "|------|---------|"
              csview --style=markdown --no-headers --body-align=left ./target/nextest/release.flakes.csv;
              echo "EOF"
            } >> "${GITHUB_ENV}"
          fi

      - uses: "marocchino/sticky-pull-request-comment@v2"
        with:
          header: "flakes_${{matrix.rust.version}}"
          ignore_empty: 'true'
          message: |
            ${{ env.FLAKY_TESTS_DEBUG }}${{ env.FLAKY_TESTS_RELEASE }}

      - name: "publish dev/release test report"
        uses: "mikepenz/action-junit-report@v5"
        if: "${{ always() }}"
        with:
          annotate_notice: 'false'
          annotate_only: 'false'
          check_annotations: 'true'
          check_retries: 'false'
          comment: 'false'
          detailed_summary: 'true'
          fail_on_failure: 'false'
          fail_on_parse_error: 'true'
          flaky_summary: 'true'
          include_empty_in_summary: 'true'
          include_passed: 'true'
          include_time_in_summary: 'true'
          report_paths: 'target/nextest/default/*junit.xml'
          require_passed_tests: 'true'
          require_tests: 'true'
          simplified_summary: 'true'
          truncate_stack_traces: 'false'
          group_reports: 'true'
          check_name: 'test-report-${{matrix.rust.version}}'
          skip_success_summary: 'false'
          job_summary: 'true'
          verbose_summary: 'false'

      - id: "clippy"
        name: "run clippy"
        run: |
          just debug_justfile="${{matrix.debug_justfile}}" rust=${{matrix.rust.version}} \
            cargo clippy --all-targets --all-features -- -D warnings

      - id: "docs"
        name: "run rustdoc"
        run: |
          just \
            debug_justfile="${{matrix.debug_justfile}}" \
            rust=${{matrix.rust.version}} \
            profile=debug \
            target=x86_64-unknown-linux-gnu \
            cargo doc
          just \
            debug_justfile="${{matrix.debug_justfile}}" \
            rust=${{matrix.rust.version}} \
            profile=release \
            target=x86_64-unknown-linux-gnu \
            cargo doc

      - id: "build_each_commit"
        continue-on-error: true
        name: "build each commit"
        if: "${{ github.event.pull_request || github.event.merge_group }}"
        run: |
          BASE="${{ github.event.pull_request.base.sha || github.event.merge_group.base.sha }}"
          just build-sweep "${BASE}"

      - name: "Setup tmate session for debug"
        if: ${{ failure() && github.event_name == 'workflow_dispatch' && inputs.debug_enabled }}
        uses: "mxschmitt/action-tmate@v3"
        timeout-minutes: 60
        with:
          limit-access-to-actor: true

  summary:
    name: "Summary"
    runs-on: "ubuntu-latest"
    needs:
      - build
    if: ${{ always() && needs.build.result != 'skipped' }}
    steps:
      - name: "Flag any build matrix failures"
        if: ${{ needs.build.outputs.result != 'true' }}
        run: |
          >&2 echo "A critical step failed!"
          exit 1
