# The primary point of this workflow is to ensure that the developer experience is good.
# We take a very vanilla ubuntu image, install all necessary dependencies via "normal" means,
# and then run the build and test steps as described in the README.md file.

# The artifacts produced by these builds are not intended to be used for anything other than
# ensuring that the developer experience is good.

# Production artifacts are produced in a sterile environment (in another CI workflow).

name: "dev.yml"

on:
  pull_request: {}
  push:
    branches:
      - "main"
  merge_group:
    types: ["checks_requested"]
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: "boolean"
        description: "Run with tmate enabled"
        required: false
        default: false
      debug_justfile:
        type: "boolean"
        description: "enable to see debug statements from just recipes"
        required: false
        default: false
      vlab_test_type:
        type: "choice"
        description: |
          Choose "release" to run vlab tests with release compiles for dataplane, frr, and other supporting containers.
        options:
          - "debug"
          - "release"
        required: false
        default: "debug"
      vlab_dpdk_sys_commit:
        type: "string"
        description: |
          The git sha dpdk-sys build you wish to test aginst.
          This affects support the image tag of support containers like frr.
        required: false
        default: ""

concurrency:
  group: "${{ github.workflow }}:${{ github.event.pull_request.number || github.event.after || github.event.merge_group && github.run_id }}"
  cancel-in-progress: true

permissions:
  contents: "read"
  packages: "write"
  id-token: "write"

jobs:
  check_changes:
    name: "Deduce required tests from code changes"
    permissions:
      contents: "read"
      pull-requests: "read"
    runs-on: "ubuntu-latest"
    outputs:
      devfiles: "${{ steps.changes.outputs.devfiles }}"
    steps:
      - name: "Checkout"
        if: "${{ !github.event.pull_request }}"
        uses: "actions/checkout@v5"
        with:
          persist-credentials: "false"
          fetch-depth: "0"
      - name: "Check code changes"
        uses: "dorny/paths-filter@v3"
        id: "changes"
        with:
          filters: |
            devfiles:
              - '!(README.md|LICENSE|.gitignore|.github/**)'
              - '.github/workflows/dev.yml'

  check:
    needs: [check_changes]
    if: "${{ needs.check_changes.outputs.devfiles == 'true' }}"
    permissions:
      checks: "write"
      pull-requests: "write"
      contents: "read"
      packages: "write"
      id-token: "write"
    strategy:
      fail-fast: false
      matrix:
        profile:
          - name: "debug"
            sterile: ""
          - name: "debug"
            sterile: "sterile"
          - name: "release"
            sterile: "sterile"
          - name: "fuzz"
            sterile: "sterile"
          #- name: "release"
          #  sterile: ""
          #- name: "fuzz"
          #  sterile: ""
        debug_justfile:
          - "${{ inputs.debug_justfile || false }}"
    name: "${{matrix.profile.name}} ${{matrix.profile.sterile}}"
    runs-on: "lab"
    timeout-minutes: 45
    steps:
      - name: "login to ghcr.io"
        uses: "docker/login-action@v3"
        with:
          registry: "ghcr.io"
          username: "${{ github.actor }}"
          password: "${{ secrets.GITHUB_TOKEN }}"

      - name: "Checkout"
        uses: "actions/checkout@v5"
        with:
          persist-credentials: "false"
          fetch-depth: "0"

      - name: "install just"
        run: |
          # this keeps our GH actions logs from getting messed up with color codes
          echo 'deb [trusted=yes] https://apt.gabe565.com /' | sudo tee /etc/apt/sources.list.d/gabe565.list
          sudo apt-get update
          sudo apt-get install --yes --no-install-recommends just

      - name: "set up build environment"
        run: |
          docker run --privileged --rm busybox:latest sh -c "echo 512 > /sys/kernel/mm/hugepages/hugepages-2048kB/nr_hugepages && cat /sys/kernel/mm/hugepages/hugepages-2048kB/nr_hugepages"
          docker pull ghcr.io/githedgehog/testn/n-vm:v0.0.6
          just --yes \
            debug_justfile="${{matrix.debug_justfile}}" \
            profile=${{matrix.profile.name}} \
            refresh-compile-env
          just --yes debug_justfile="${{matrix.debug_justfile}}" fake-nix

      - name: "cargo deny check"
        run: |
          just \
            debug_justfile="${{matrix.debug_justfile}}" \
            profile=${{matrix.profile.name}} \
            ${{matrix.profile.sterile}} cargo deny check

      - name: "push container"
        if: ${{ matrix.profile.sterile == 'sterile' && (matrix.profile.name == 'release' || matrix.profile.name == 'debug') }}
        run: |
          just \
            debug_justfile="${{matrix.debug_justfile}}" \
            profile=${{matrix.profile.name}} \
            target=x86_64-unknown-linux-gnu \
            push-container

      - id: "test"
        name: "test"
        run: |
          set -euo pipefail
          mkdir --parent ./target/nextest
          # Run tests. The resulting results.json is not a full JSON object but
          # a list of JSON objects, one per line.
          if [ ${{ matrix.profile.name }} = "fuzz" ]; then
            echo "::notice::Running fuzz tests"
            just \
              debug_justfile="${{matrix.debug_justfile}}" \
              profile=${{matrix.profile.name}} \
              target=x86_64-unknown-linux-gnu \
              ${{matrix.profile.sterile}} coverage \
                --status-level=none \
                --final-status-level=skip \
                --message-format=libtest-json-plus > ./results.json
          else
            echo "::notice::Running regular tests"
            just \
              debug_justfile="${{matrix.debug_justfile}}" \
              profile=${{matrix.profile.name}} \
              target=x86_64-unknown-linux-gnu \
              ${{matrix.profile.sterile}} cargo nextest run \
                --cargo-profile=${{matrix.profile.name}} \
                --status-level=none \
                --final-status-level=skip \
                --message-format=libtest-json-plus \
                > ./results.json
            echo "::notice::Running Shuttle tests"
            # We need to rebuild using the shuttle feature. To avoid running
            # all tests a second time, we filter to run only tests with pattern
            # "shuttle" in their name (test function name, file name, or module
            # name).
            #
            # IF YOUR SHUTTLE TESTS DO NOT HAVE "shuttle" IN THEIR NAME, THEY
            # WILL NOT RUN.
            just \
              debug_justfile="${{matrix.debug_justfile}}" \
              profile=${{matrix.profile.name}} \
              target=x86_64-unknown-linux-gnu \
              ${{matrix.profile.sterile}} cargo nextest run \
                --cargo-profile=${{matrix.profile.name}} \
                --status-level=none \
                --final-status-level=none \
                --message-format=libtest-json-plus \
                --features shuttle \
                shuttle \
                >> ./results.json
          fi
          # look for any flakes (flakes have a #\\d+ match in their name field)
          jq \
            --raw-output \
            --slurp '.[] | select(.type == "test" and (.name | test(".*#\\d+"))) | ( .name | split("#") ) |
                     [.[0], (.[1] | tonumber)] | @csv
          ' ./results.json > ./target/nextest/flakes.csv
          if [ -s ./target/nextest/flakes.csv ]; then
            {
              echo "FLAKY_TESTS<<EOF"
              echo -e "### :warning: Flaky tests (${{matrix.profile.name}} - ${{matrix.profile.sterile}})\n";
              echo "| test | retries |"
              echo "|------|---------|"
              just cargo csview --style=markdown --no-headers --body-align=left ./target/nextest/flakes.csv;
              echo "EOF"
            } >> "${GITHUB_ENV}"
          fi
          rm results.json

      - name: "upload test results to codecov"
        if: ${{ always() }}
        uses: "codecov/codecov-action@v5"
        with:
          fail_ci_if_error: true
          files: ./target/nextest/default/junit.xml
          report_type: "test_results"
          disable_search: "true"
          use_oidc: "true"
          verbose: true
          flags: "${{matrix.profile.name}}-${{ matrix.profile.sterile || 'developer' }}"

      - name: "upload codecov analysis"
        if: ${{ matrix.profile.name == 'fuzz' }}
        uses: "codecov/codecov-action@v5"
        with:
          fail_ci_if_error: true
          files: ./target/nextest/coverage/codecov.json
          report_type: "coverage"
          disable_search: "true"
          use_oidc: "true"
          verbose: true
          flags: "${{matrix.profile.name}}-${{ matrix.profile.sterile || 'developer' }}"

      - name: "clean up coverage data"
        run: |
          rm -f codecov codecov.SHA256SUM codecov.SHA256SUM.sig

      - uses: "marocchino/sticky-pull-request-comment@v2"
        if: ${{ always() }}
        with:
          header: "flakes_${{matrix.profile.name}}_${{matrix.profile.sterile}}"
          ignore_empty: "true"
          message: |
            ${{ env.FLAKY_TESTS }}

      - name: "publish test report"
        uses: "mikepenz/action-junit-report@v5"
        if: "${{ always() }}"
        with:
          annotate_notice: "false"
          annotate_only: "false"
          check_annotations: "true"
          check_retries: "false"
          comment: "false"
          detailed_summary: "true"
          fail_on_failure: "false"
          fail_on_parse_error: "true"
          flaky_summary: "true"
          include_empty_in_summary: "true"
          include_passed: "true"
          include_time_in_summary: "true"
          report_paths: "target/nextest/default/*junit.xml"
          require_passed_tests: "true"
          require_tests: "true"
          simplified_summary: "true"
          truncate_stack_traces: "false"
          group_reports: "true"
          check_name: "test-report-${{matrix.profile.name}}-sterile:${{matrix.profile.sterile == 'sterile'}}"
          skip_success_summary: "false"
          job_summary: "true"
          verbose_summary: "false"

      - id: "clippy"
        name: "run clippy"
        run: |
          just debug_justfile="${{matrix.debug_justfile}}" profile=${{matrix.profile.name}} \
            ${{matrix.profile.sterile}} cargo clippy --all-targets --all-features -- -D warnings

      - id: "docs"
        name: "run rustdoc"
        run: |
          RUSTDOCFLAGS="-D warnings" just \
            debug_justfile="${{matrix.debug_justfile}}" \
            profile=${{matrix.profile.name}} \
            target=x86_64-unknown-linux-gnu \
            ${{matrix.profile.sterile}} cargo doc

      - name: "Setup tmate session for debug"
        if: ${{ failure() && github.event_name == 'workflow_dispatch' && inputs.debug_enabled }}
        uses: "mxschmitt/action-tmate@v3"
        timeout-minutes: 60
        with:
          limit-access-to-actor: true

  vlab:
    if: "${{ needs.check_changes.outputs.devfiles == 'true' || inputs.vlab_dpdk_sys_commit }}"
    needs:
      - check

    name: "${{ matrix.hybrid && 'hlab' || 'vlab' }}-${{ matrix.fabricmode == 'spine-leaf' && 'sl' || 'cc' }}-${{ matrix.gateway && 'gw-' || '' }}${{ matrix.includeonie && 'onie-' || '' }}${{ matrix.buildmode }}-${{ matrix.vpcmode }}"

    uses: githedgehog/fabricator/.github/workflows/run-vlab.yaml@master
    with:
      #skip: ${{ matrix.hybrid && !contains(github.event.pull_request.labels.*.name, 'ci:+hlab') || !matrix.hybrid && !contains(github.event.pull_request.labels.*.name, 'ci:+vlab') }}
      fabricatorref: master
      prebuild: |
        just bump dataplane HEAD.x86_64-unknown-linux-gnu.${{ inputs.vlab_test_type == '' && 'debug' || inputs.vlab_test_type }}.${{ github.sha }}
        if [ -n ${{inputs.vlab_dpdk_sys_commit }} ]; then
          just bump frr ${{ inputs.vlab_dpdk_sys_commit }}.${{ inputs.vlab_test_type == '' && 'debug' || inputs.vlab_test_type }}
        fi
      fabricmode: ${{ matrix.fabricmode }}
      gateway: ${{ matrix.gateway }}
      includeonie: ${{ matrix.includeonie }}
      buildmode: ${{ matrix.buildmode }}
      vpcmode: ${{ matrix.vpcmode }}
      releasetest: ${{ contains(github.event.pull_request.labels.*.name, 'ci:+release') }}
      hybrid: ${{ matrix.hybrid }}

    strategy:
      fail-fast: false
      matrix:
        fabricmode:
          - spine-leaf
        gateway:
          - true
        includeonie:
          - false
        buildmode:
          - iso
        vpcmode:
          - l2vni
          - l3vni
        hybrid:
          - false
        include:
          - fabricmode: spine-leaf
            gateway: true
            includeonie: false
            buildmode: iso
            vpcmode: l2vni
            hybrid: true

  summary:
    name: "Summary"
    runs-on: "ubuntu-latest"
    needs:
      - check
      - vlab
    # Run always, except when the "check" job was skipped.
    #
    # When the check job is skipped, summary will be marked as skipped, and
    # it's OK for CI (it's not a failure).
    # Why don't we do the same for check jobs? Because their names depend on
    # matrix values, and if we skip them the names won't be generated and
    # GitHub won't be able to find skipped jobs for required status checks.
    if: ${{ always() }}
    steps:
      - name: "Flag any check matrix failures"
        if: ${{ needs.check.result != 'success' && needs.check.result != 'skipped' }}
        run: |
          echo '::error:: Some check job(s) failed'
          exit 1
      - name: "Flag any vlab matrix failures"
        if: ${{ needs.vlab.result != 'success' && needs.vlab.result != 'skipped' }}
        run: |
          echo '::error:: Some vlab job(s) failed'
          exit 1
