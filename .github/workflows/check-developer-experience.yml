# The primary point of this workflow is to ensure that the developer experience is good.
# We take a very vanilla ubuntu image, install all necessary dependencies via "normal" means,
# and then run the build and test steps as described in the README.md file.

# The artifacts produced by these builds are not intended to be used for anything other than
# ensuring that the developer experience is good.

# Production artifacts are produced in a sterile environment (in another CI workflow).

name: Developer Experience
on:
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: "Run with tmate enabled"
        required: false
        default: false
  pull_request:
    branches:
      - main
      - dpdk-sys/update

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  just: 1.36.0

permissions:
  contents: write
  packages: write
  id-token: write
jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        rust:
          - toolchain: stable
            optional: false
          - toolchain: beta
            optional: true
          - toolchain: nightly
            optional: true
    continue-on-error: ${{ matrix.rust.optional }}
    runs-on:
      - lab
    timeout-minutes: 45
    steps:
      - name: login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: install just
        uses: extractions/setup-just@v2
        with:
          just-version: ${{env.just}}
      - name: install rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{matrix.rust.toolchain}}
          targets: x86_64-unknown-linux-gnu,x86_64-unknown-linux-musl
      - name: Checkout
        uses: actions/checkout@v4
      - uses: cargo-bins/cargo-binstall@main
      - name: install nextest
        run: cargo binstall --no-confirm cargo-nextest
      - run: |
          sudo apt-get update
          sudo apt-get --yes --no-install-recommends install pkg-config openssl libssl-dev
      - name: install markdown-test-report
        run: cargo binstall --no-confirm markdown-test-report
      - name: refresh-compile-env
        run: just --yes refresh-compile-env
      - run: just --yes fake-nix
      - run: just cargo +${{matrix.rust.toolchain}} build --locked --profile=debug --target=x86_64-unknown-linux-gnu
        continue-on-error: ${{ matrix.rust.optional }}
      - run: |
          NEXTEST_EXPERIMENTAL_LIBTEST_JSON=1 just cargo +${{matrix.rust.toolchain}} \
              nextest --profile ci run --message-format libtest-json-plus --locked --target=x86_64-unknown-linux-gnu \
              > ci.x86_64-unknown-linux-gnu.json
          cp ci.x86_64-unknown-linux-gnu.json target/nextest/ci/ci.x86_64-unknown-linux-gnu.json
          markdown-test-report ci.x86_64-unknown-linux-gnu.json -o target/nextest/ci/ci.x86_64-unknown-linux-gnu.md
          cat target/nextest/ci/ci.x86_64-unknown-linux-gnu.md >> $GITHUB_STEP_SUMMARY
        continue-on-error: ${{ matrix.rust.optional }}
      - run: just cargo +${{matrix.rust.toolchain}} build --locked --profile=debug --target=x86_64-unknown-linux-musl
        continue-on-error: ${{ matrix.rust.optional }}
      - run: |
          NEXTEST_EXPERIMENTAL_LIBTEST_JSON=1 just cargo +${{matrix.rust.toolchain}} \
              nextest --profile ci run --message-format libtest-json-plus --locked --target=x86_64-unknown-linux-musl \
              > ci.x86_64-unknown-linux-musl.json
          cp ci.x86_64-unknown-linux-musl.json target/nextest/ci/ci.x86_64-unknown-linux-musl.json
          markdown-test-report ci.x86_64-unknown-linux-musl.json -o target/nextest/ci/ci.x86_64-unknown-linux-musl.md
          cat target/nextest/ci/ci.x86_64-unknown-linux-musl.md >> $GITHUB_STEP_SUMMARY
        continue-on-error: ${{ matrix.rust.optional }}
      - run: just cargo +${{matrix.rust.toolchain}} build --locked --profile=release --target=x86_64-unknown-linux-gnu
        continue-on-error: ${{ matrix.rust.optional }}
      - run: just cargo +${{matrix.rust.toolchain}} test --locked --profile=release --target=x86_64-unknown-linux-gnu
        continue-on-error: ${{ matrix.rust.optional }}
      - run: just cargo +${{matrix.rust.toolchain}} build --locked --profile=release --target=x86_64-unknown-linux-musl
        continue-on-error: ${{ matrix.rust.optional }}
      - run: just cargo +${{matrix.rust.toolchain}} test --locked --profile=release --target=x86_64-unknown-linux-musl
        continue-on-error: ${{ matrix.rust.optional }}

      - uses: actions/upload-artifact@v4
        with:
          name: 'test-results'
          path: target/nextest/ci/
          retention-days: 10
          overwrite: 'true'
          compression-level: '0'
      - name: Setup tmate session for debug
        if: ${{ failure() && github.event_name == 'workflow_dispatch' && inputs.debug_enabled }}
        uses: mxschmitt/action-tmate@v3
        timeout-minutes: 30
        with:
          limit-access-to-actor: true
