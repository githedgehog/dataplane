// SPDX-License-Identifier: Apache-2.0
// Copyright Open Network Fabric Authors

//! Dataplane configuration model: external model representation
//! The external representation is the representation of the configuration
//! received via the gRPC server using non-protobuf autogenerated types.

pub mod overlay;

use crate::config::device::DeviceConfig;
use crate::config::routing::vrf::VrfConfig;
use overlay::Overlay;
use thiserror::Error;

/// The reasons why we may reject a configuration
#[derive(Debug, Error, PartialEq)]
pub enum ApiError {
    #[error("A VPC with id '{0}' already exists")]
    DuplicateVpcId(String),
    #[error("A VPC peering with id '{0}' already exists")]
    DuplicateVpcPeeringId(String),
    #[error("The VPC peering '{0}' is incomplete")]
    IncompletePeeringData(String),
    #[error("A VPC peering object refers to non-existent VPC '{0}'")]
    NoSuchVpc(String),
    #[error("'{0}' is not a valid VNI")]
    InvalidVpcVni(u32),
    #[error("VNI '{0}' is already in use")]
    DuplicateVpcVni(u32),
    #[error("VPC peering name is missing")]
    MissingPeeringName,
}
type ApiResult = Result<(), ApiError>;

#[allow(unused)]
pub struct Underlay {
    vrf: VrfConfig, /* default vrf */
}

#[allow(unused)]
/// The configuration object as seen by the gRPC server
pub struct GwConfig {
    generation: u64,      /* configuration version */
    device: DeviceConfig, /* goes as-is into the internal config */
    underlay: Underlay,   /* goes as-is into the internal config */
    overlay: Overlay,     /* VPCs and peerings -- get highly developed in internal config */
}
