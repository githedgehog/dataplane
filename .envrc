export PROJECT_DIR="$(pwd)"

if [ -h "${PROJECT_DIR}/compile-env" ] || [ -d "${PROJECT_DIR}/compile-env" ]; then
    export PATH="${PROJECT_DIR}/compile-env/bin:$PATH"
    export LIBCLANG_PATH="${PROJECT_DIR}/compile-env/bin"
    export COMPILE_ENV="${PROJECT_DIR}/compile-env"
else
    >&2 echo "no compile environment found"
    exit 0
fi

export NEXTEST_EXPERIMENTAL_LIBTEST_JSON=1

CRT="-C target-feature=-crt-static"
DEBUG="-C debuginfo=full -C split-debuginfo=off -C dwarf-version=5"
LINKER="-C linker=${COMPILE_ENV}/bin/clang -C link-arg=--ld-path=${COMPILE_ENV}/bin/ld.lld"
RELRO="-C relro-level=full"
TARGET_CPU="-C target-cpu=x86-64-v3"

RUSTFLAGS="${CRT} ${DEBUG} ${LINKER} ${RELRO} ${TARGET_CPU}"

OPTIMIZE="-C opt-level=3 -C linker-plugin-lto -C lto=thin -C embed-bitcode=yes -C codegen-units=1"

case ${PROFILE:-DEBUG} in
    fuzz|FUZZ)
        COVERAGE="-C instrument-coverage"
        DEBUG_ASSERTIONS="-C debug-assertions=on"
        OVERFLOW_CHECK="-C overflow-checks=on"
        RUSTFLAGS="${RUSTFLAGS} ${COVERAGE} ${DEBUG_ASSERTIONS} ${OVERFLOW_CHECK}"
        ;;
    release|RELEASE)
        RUSTFLAGS="${RUSTFLAGS} ${OPTIMIZE}"
        ;;
    debug|DEBUG)
        DEBUG_ASSERTIONS="-C debug-assertions=on"
        OPTIMIZE="-C opt-level=0"
        OVERFLOW_CHECK="-C overflow-checks=on"
        RUSTFLAGS="${RUSTFLAGS} ${OPTIMIZE} ${DEBUG_ASSERTIONS} ${OVERFLOW_CHECK}"
        ;;
    *)
        >&2 echo "unknown profile"
        exit 1
        ;;
esac

export RUSTFLAGS
